---
import '../styles/index.css';
import Dashboard from '../components/Dashboard';

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Archivo:ital,wght@0,100..900;1,100..900&family=Rethink+Sans:ital,wght@0,400..800;1,400..800&display=swap" rel="stylesheet">
		<title>Dashboard</title>
	</head>
	<body>
		<Dashboard client:load />


		<script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"> </script>
		<!-- Load the coco-ssd model. -->
		<script is:inline src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"> </script>
		<script is:inline type="module">
			const model = await cocoSsd.load();
			console.log(model);

			window.addEventListener('new-image', async () => {
				const canvasEl = document.querySelector('canvas');
				const predictions = await model.detect(canvasEl);
				console.log(predictions);

				const ctx = canvasEl.getContext('2d');
				ctx.font = '16px \'Rethink Sans\', sans-serif';
				ctx.fillStyle = 'white';
				ctx.strokeStyle = 'black';
				ctx.lineWidth = 2;

				for (const prediction of predictions) {
					const [x, y, width, height] = prediction.bbox;
					const text = `${prediction.class} (${Math.round(prediction.score * 100)}%)`;
					const area = width * height;
					// TODO: Filter out areas that are far too small or too large
					if (area) {
						ctx.strokeText(text, x, y - 5);
						ctx.fillText(text, x, y - 5);
						ctx.strokeRect(x, y, width, height);
					}
				}
			});
		</script>
	</body>
</html>
